import React, { useState, useCallback } from 'react';
import { Plus, X, Download, Eye, Settings, Layers, Filter, BarChart3, Save } from 'lucide-react';

// UI Components
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  icon?: React.ComponentType<{ size?: number; className?: string }>;
  loading?: boolean;
  children: React.ReactNode;
}

const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary', 
  size = 'md', 
  icon: Icon,
  loading = false,
  children, 
  className = '', 
  disabled,
  ...props 
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 shadow-sm',
    secondary: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-blue-500 shadow-sm',
    ghost: 'text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:ring-blue-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 shadow-sm'
  };
  
  const sizes = {
    sm: 'px-3 py-1.5 text-sm gap-1.5',
    md: 'px-4 py-2 text-sm gap-2',
    lg: 'px-6 py-3 text-base gap-2'
  };
  
  const isDisabled = disabled || loading;
  
  return (
    <button
      {...props}
      disabled={isDisabled}
      className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${isDisabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}
    >
      {loading ? (
        <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
      ) : Icon ? (
        <Icon size={size === 'sm' ? 14 : size === 'lg' ? 18 : 16} />
      ) : null}
      {children}
    </button>
  );
};

interface CardProps {
  children: React.ReactNode;
  className?: string;
  hover?: boolean;
  padding?: 'none' | 'sm' | 'md' | 'lg';
}

const Card: React.FC<CardProps> = ({ 
  children, 
  className = '', 
  hover = false,
  padding = 'md' 
}) => {
  const paddingClasses = {
    none: '',
    sm: 'p-4',
    md: 'p-6',
    lg: 'p-8'
  };
  
  return (
    <div className={`
      bg-white border border-gray-200 rounded-xl shadow-sm
      ${hover ? 'hover:shadow-md hover:border-gray-300' : ''}
      ${paddingClasses[padding]}
      transition-all duration-200
      ${className}
    `}>
      {children}
    </div>
  );
};

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
}

const Input: React.FC<InputProps> = ({ 
  label, 
  error, 
  helperText, 
  className = '', 
  ...props 
}) => {
  return (
    <div className="space-y-1">
      {label && (
        <label className="block text-sm font-medium text-gray-700">
          {label}
        </label>
      )}
      <input
        {...props}
        className={`
          block w-full px-3 py-2 border border-gray-300 rounded-lg
          placeholder-gray-400 text-gray-900
          focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
          disabled:bg-gray-50 disabled:text-gray-500 disabled:cursor-not-allowed
          transition-colors duration-200
          ${error ? 'border-red-300 focus:ring-red-500' : ''}
          ${className}
        `}
      />
      {error && <p className="text-sm text-red-600">{error}</p>}
      {helperText && !error && <p className="text-sm text-gray-500">{helperText}</p>}
    </div>
  );
};

interface BadgeProps {
  children: React.ReactNode;
  variant?: 'default' | 'success' | 'warning' | 'danger';
  size?: 'sm' | 'md';
}

const Badge: React.FC<BadgeProps> = ({ 
  children, 
  variant = 'default', 
  size = 'sm' 
}) => {
  const variants = {
    default: 'bg-gray-100 text-gray-800',
    success: 'bg-green-100 text-green-800',
    warning: 'bg-yellow-100 text-yellow-800',
    danger: 'bg-red-100 text-red-800'
  };
  
  const sizes = {
    sm: 'px-2 py-1 text-xs',
    md: 'px-3 py-1 text-sm'
  };
  
  return (
    <span className={`
      inline-flex items-center font-medium rounded-full
      ${variants[variant]} ${sizes[size]}
    `}>
      {children}
    </span>
  );
};

// ConfigItemCard - wrapper for all input items
interface ConfigItemCardProps extends React.HTMLAttributes<HTMLDivElement> {}

const ConfigItemCard: React.FC<ConfigItemCardProps> = ({
  children,
  className = '',
  ...props
}) => (
  <Card
    hover
    padding="sm"
    className={`flex items-start gap-3 ${className}`}
    {...props}
  >
    {children}
  </Card>
);

// Types
interface ChartConfig {
  type: 'bar' | 'line' | 'scatter' | 'pie' | 'area' | 'histogram' | 'heatmap';
  title: string;
  x: string;
  y: string;
  group_by?: string;
  color?: string;
}

interface FilterConfig {
  type: 'dropdown' | 'multichoice' | 'date_range' | 'slider' | 'text_box';
  label: string;
  id: string;
  options?: string[];
}

interface SectionConfig {
  charts: ChartConfig[];
}

interface LayoutConfig {
  layout: 'minimal-reports' | 'jacket-reports';
  cards: string[];
  filters: FilterConfig[];
  alleys?: SectionConfig[];
  lanes?: SectionConfig[];
  include_table: boolean;
}

const DashboardBuilder: React.FC = () => {
  const [config, setConfig] = useState<LayoutConfig>({
    layout: 'minimal-reports',
    cards: ['sales', 'growth'],
    filters: [],
    alleys: [{ charts: [] }],
    include_table: false,
  });

  const [previewMode, setPreviewMode] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);

  const updateConfig = useCallback((updates: Partial<LayoutConfig>) => {
    setConfig(prev => ({ ...prev, ...updates }));
  }, []);

  const addCard = useCallback(() => {
    const cardName = prompt('Enter card name:');
    if (cardName?.trim()) {
      updateConfig({ cards: [...config.cards, cardName.trim()] });
    }
  }, [config.cards, updateConfig]);

  const removeCard = useCallback((index: number) => {
    const newCards = config.cards.filter((_, i) => i !== index);
    updateConfig({ cards: newCards });
  }, [config.cards, updateConfig]);

  const addFilter = useCallback(() => {
    const filterType = prompt('Filter type (dropdown, multichoice, date_range, slider, text_box):') as FilterConfig['type'];
    const label = prompt('Filter label:') || 'Filter';
    const id = prompt('Filter ID:') || 'filter_' + Date.now();
    
    if (filterType) {
      updateConfig({
        filters: [...config.filters, { type: filterType, label, id }]
      });
    }
  }, [config.filters, updateConfig]);

  const removeFilter = useCallback((index: number) => {
    const newFilters = config.filters.filter((_, i) => i !== index);
    updateConfig({ filters: newFilters });
  }, [config.filters, updateConfig]);

  const addSection = useCallback(() => {
    const sectionKey = config.layout === 'minimal-reports' ? 'alleys' : 'lanes';
    const currentSections = config[sectionKey] || [];
    updateConfig({
      [sectionKey]: [...currentSections, { charts: [] }]
    });
  }, [config.layout, config.alleys, config.lanes, updateConfig]);

  const addChart = useCallback((sectionIndex: number) => {
    const chartType = prompt('Chart type (bar, line, scatter, pie, area, histogram, heatmap):') as ChartConfig['type'];
    const title = prompt('Chart title:') || 'Untitled Chart';
    const x = prompt('X-axis variable:') || 'x';
    const y = prompt('Y-axis variable:') || 'y';
    
    if (chartType) {
      const sectionKey = config.layout === 'minimal-reports' ? 'alleys' : 'lanes';
      const sections = [...(config[sectionKey] || [])];
      sections[sectionIndex].charts.push({
        type: chartType,
        title,
        x,
        y,
        color: '#3b82f6'
      });
      updateConfig({ [sectionKey]: sections });
    }
  }, [config.layout, config.alleys, config.lanes, updateConfig]);

  const removeChart = useCallback((sectionIndex: number, chartIndex: number) => {
    const sectionKey = config.layout === 'minimal-reports' ? 'alleys' : 'lanes';
    const sections = [...(config[sectionKey] || [])];
    sections[sectionIndex].charts.splice(chartIndex, 1);
    updateConfig({ [sectionKey]: sections });
  }, [config.layout, config.alleys, config.lanes, updateConfig]);

  const handleGenerateCode = async () => {
    setIsGenerating(true);
    try {
      const response = await fetch('http://localhost:8000/generate-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(config),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${config.layout === 'minimal-reports' ? 'Minimal' : 'Jacket'}Dashboard.tsx`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        alert('Failed to generate code. Please check your configuration.');
      }
    } catch (error) {
      alert('Error generating code: ' + error);
    } finally {
      setIsGenerating(false);
    }
  };

  const sections = config.layout === 'minimal-reports' ? config.alleys : config.lanes;
  const sectionName = config.layout === 'minimal-reports' ? 'Alley' : 'Lane';

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Enhanced Header */}
      <header className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                  <Layers className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-gray-900">Dashboard Builder</h1>
                  <p className="text-sm text-gray-500">Create beautiful, responsive dashboards</p>
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <Button
                variant="ghost"
                icon={Eye}
                onClick={() => setPreviewMode(!previewMode)}
              >
                {previewMode ? 'Edit Mode' : 'Preview Mode'}
              </Button>
              
              <Button
                variant="secondary"
                icon={Save}
                size="md"
              >
                Save Template
              </Button>

              <Button
                variant="primary"
                icon={Download}
                onClick={handleGenerateCode}
                loading={isGenerating}
                size="md"
              >
                Generate Code
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Configuration Panel */}
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold text-gray-900">Configuration</h2>
              <Button
                variant="ghost"
                icon={Settings}
                onClick={() => setShowAdvanced(!showAdvanced)}
                size="sm"
              >
                {showAdvanced ? 'Basic' : 'Advanced'}
              </Button>
            </div>

            {/* Layout Selection */}
            <Card hover>
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2">
                  <Layers className="w-5 h-5 text-blue-500" />
                  Layout Type
                </h3>
                
                <div className="grid grid-cols-2 gap-3">
                  {(['minimal-reports', 'jacket-reports'] as const).map((layoutType) => (
                    <button
                      key={layoutType}
                      onClick={() => updateConfig({ layout: layoutType })}
                      className={`
                        p-4 border-2 rounded-lg text-left transition-all duration-200
                        ${config.layout === layoutType 
                          ? 'border-blue-500 bg-blue-50 text-blue-900' 
                          : 'border-gray-200 hover:border-gray-300 bg-white'
                        }
                      `}
                    >
                      <div className="font-medium capitalize">
                        {layoutType.replace('-', ' ')}
                      </div>
                      <div className="text-sm text-gray-500 mt-1">
                        {layoutType === 'minimal-reports' 
                          ? 'Horizontal layout with sidebar filters' 
                          : 'Vertical layout with top filters'
                        }
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </Card>

            {/* Enhanced Cards Section */}
            <Card hover>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2">
                    <BarChart3 className="w-5 h-5 text-green-500" />
                    Cards
                    <Badge variant="default">{config.cards.length}</Badge>
                  </h3>
                  <Button
                    variant="secondary"
                    icon={Plus}
                    onClick={addCard}
                    size="sm"
                  >
                    Add Card
                  </Button>
                </div>

                <div className="space-y-3">
                  {config.cards.map((card, index) => (
                    <ConfigItemCard key={index}>
                      <Input
                        value={card}
                        onChange={e => {
                          const next = [...config.cards];
                          next[index] = e.target.value;
                          updateConfig({ cards: next });
                        }}
                        className="flex-1"
                        placeholder="Card name"
                      />
                      <Button
                        variant="ghost"
                        icon={X}
                        onClick={() => removeCard(index)}
                        size="sm"
                        className="text-red-500 hover:text-red-700 hover:bg-red-50"
                      />
                    </ConfigItemCard>
                  ))}

                  {config.cards.length === 0 && (
                    <ConfigItemCard className="justify-center text-center text-gray-400 border-dashed border-2">
                      <div className="py-4">
                        <BarChart3 className="w-10 h-10 mx-auto mb-2" />
                        <p>No cards yet</p>
                        <p className="text-xs">Click "Add Card" to get started</p>
                      </div>
                    </ConfigItemCard>
                  )}
                </div>
              </div>
            </Card>

            {/* Enhanced Filters Section */}
            <Card hover>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2">
                    <Filter className="w-5 h-5 text-purple-500" />
                    Filters
                    <Badge variant="default">{config.filters.length}</Badge>
                  </h3>
                  <Button
                    variant="secondary"
                    icon={Plus}
                    onClick={addFilter}
                    size="sm"
                  >
                    Add Filter
                  </Button>
                </div>

                <div className="space-y-3">
                  {config.filters.map((filter, index) => (
                    <ConfigItemCard key={index} className="justify-between">
                      <div>
                        <div className="font-medium">{filter.label}</div>
                        <div className="text-xs text-gray-500">
                          {filter.type} • id: {filter.id}
                        </div>
                      </div>
                      <Button
                        variant="ghost"
                        icon={X}
                        onClick={() => removeFilter(index)}
                        size="sm"
                        className="text-red-500 hover:text-red-700 hover:bg-red-50"
                      />
                    </ConfigItemCard>
                  ))}

                  {config.filters.length === 0 && (
                    <ConfigItemCard className="justify-center text-center text-gray-400 border-dashed border-2">
                      <div className="py-4">
                        <Filter className="w-10 h-10 mx-auto mb-2" />
                        <p>No filters yet</p>
                        <p className="text-xs">Click "Add Filter" to get started</p>
                      </div>
                    </ConfigItemCard>
                  )}
                </div>
              </div>
            </Card>

            {/* Enhanced Sections */}
            <Card hover>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-medium text-gray-900">
                    {sectionName}s
                    <Badge variant="default" className="ml-2">{sections?.length || 0}</Badge>
                  </h3>
                  <Button
                    variant="secondary"
                    icon={Plus}
                    onClick={addSection}
                    size="sm"
                  >
                    Add {sectionName}
                  </Button>
                </div>

                <div className="space-y-4">
                  {sections?.map((section, sectionIndex) => (
                    <Card key={sectionIndex} padding="sm" className="border-l-4 border-l-blue-500">
                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <h4 className="font-medium text-gray-900">
                            {sectionName} {sectionIndex + 1}
                            <Badge variant="default" size="sm" className="ml-2">
                              {section.charts.length} charts
                            </Badge>
                          </h4>
                          <Button
                            variant="secondary"
                            icon={Plus}
                            onClick={() => addChart(sectionIndex)}
                            size="sm"
                          >
                            Add Chart
                          </Button>
                        </div>

                        <div className="space-y-2">
                          {section.charts.map((chart, chartIndex) => (
                            <ConfigItemCard key={chartIndex} className="justify-between">
                              <div>
                                <div className="font-medium">{chart.title}</div>
                                <div className="text-xs text-gray-500">
                                  {chart.type} • X: {chart.x} • Y: {chart.y}
                                </div>
                              </div>
                              <Button
                                variant="ghost"
                                icon={X}
                                onClick={() => removeChart(sectionIndex, chartIndex)}
                                size="sm"
                                className="text-red-500 hover:text-red-700 hover:bg-red-50"
                              />
                            </ConfigItemCard>
                          ))}

                          {section.charts.length === 0 && (
                            <ConfigItemCard className="justify-center text-gray-400 border-dashed border-2">
                              <p className="text-xs py-3">No charts in this {sectionName.toLowerCase()}</p>
                            </ConfigItemCard>
                          )}
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
              </div>
            </Card>

            {/* Include Table Toggle */}
            <Card hover>
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium text-gray-900">Data Table</h3>
                  <p className="text-sm text-gray-500">Include a data table at the bottom of your dashboard</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={config.include_table}
                    onChange={(e) => updateConfig({ include_table: e.target.checked })}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
            </Card>
          </div>

          {/* Enhanced Preview Panel */}
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold text-gray-900">Live Preview</h2>
              <div className="flex items-center space-x-2">
                <Badge variant={previewMode ? 'success' : 'default'}>
                  {previewMode ? 'Preview Mode' : 'Edit Mode'}
                </Badge>
              </div>
            </div>

            <Card className="min-h-96">
              <div className="space-y-4">
                <div className="flex items-center justify-between pb-4 border-b border-gray-200">
                  <h3 className="font-medium text-gray-900">
                    {config.layout === 'minimal-reports' ? 'Minimal Reports Layout' : 'Jacket Reports Layout'}
                  </h3>
                  <Badge variant="default" size="sm">
                    {config.layout.replace('-', ' ')}
                  </Badge>
                </div>

                {/* Preview Content */}
                <div className="space-y-4">
                  {/* Cards Preview */}
                  {config.cards.length > 0 && (
                    <div className={`grid grid-cols-${Math.min(config.cards.length, 4)} gap-3`}>
                      {config.cards.map((card, index) => (
                        <div key={index} className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 rounded-lg p-3">
                          <div className="text-sm font-medium text-blue-900 mb-1">{card}</div>
                          <div className="text-xl font-bold text-blue-600">1,234</div>
                          <div className="text-xs text-blue-500">+5.2% ↗</div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Sections Preview */}
                  {sections && sections.length > 0 && (
                    <div className="space-y-3">
                      {sections.map((section, sectionIndex) => (
                        <div key={sectionIndex} className="space-y-2">
                          <div className="text-sm font-medium text-gray-600">
                            {sectionName} {sectionIndex + 1}
                          </div>
                          {section.charts.length > 0 ? (
                            <div className={`grid grid-cols-${Math.min(section.charts.length, 3)} gap-3`}>
                              {section.charts.map((chart, chartIndex) => (
                                <div key={chartIndex} className="bg-white border border-gray-200 rounded-lg p-3">
                                  <div className="text-sm font-medium text-gray-800 mb-2">{chart.title}</div>
                                  <div className="flex items-center justify-center h-16 bg-gray-100 rounded">
                                    <div className="text-2xl">
                                      {chart.type === 'bar' ? '📊' :
                                       chart.type === 'line' ? '📈' :
                                       chart.type === 'scatter' ? '🔸' :
                                       chart.type === 'pie' ? '🥧' :
                                       chart.type === 'area' ? '📉' :
                                       chart.type === 'histogram' ? '📊' :
                                       chart.type === 'heatmap' ? '🔥' : '📊'}
                                    </div>
                                  </div>
                                  <div className="text-xs text-gray-500 mt-2">
                                    <Badge variant="success" size="sm">{chart.type}</Badge>
                                  </div>
                                </div>
                              ))}
                            </div>
                          ) : (
                            <div className="text-center py-4 text-gray-400 border-2 border-dashed border-gray-200 rounded-lg">
                              <p className="text-sm">No charts in this {sectionName.toLowerCase()}</p>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Table Preview */}
                  {config.include_table && (
                    <div className="border border-gray-200 rounded-lg overflow-hidden">
                      <div className="bg-gray-50 px-4 py-2 border-b border-gray-200">
                        <div className="text-sm font-medium text-gray-900">Data Table</div>
                      </div>
                      <div className="p-4 text-center text-gray-500">
                        <div className="text-sm">Table will be displayed here</div>
                      </div>
                    </div>
                  )}

                  {/* Empty State */}
                  {config.cards.length === 0 && (!sections || sections.length === 0) && (
                    <div className="text-center py-12 text-gray-500">
                      <Layers className="w-16 h-16 mx-auto text-gray-300 mb-4" />
                      <p className="text-lg font-medium">Start Building Your Dashboard</p>
                      <p className="text-sm">Add cards, filters, and charts to see your preview</p>
                    </div>
                  )}
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardBuilder;
